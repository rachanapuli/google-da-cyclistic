/* Combine all the 12 monthly tables into one table for the 
year's data consisting of all the trips from
2023-01-01 to 2023-12-31 */

CREATE TABLE trips_2023 AS
SELECT *
FROM (
	SELECT * FROM trips_2023_01
	UNION ALL
	SELECT * FROM trips_2023_02
	UNION ALL
	SELECT * FROM trips_2023_03
	UNION ALL
	SELECT * FROM trips_2023_04
	UNION ALL
	SELECT * FROM trips_2023_05
	UNION ALL
	SELECT * FROM trips_2023_06
	UNION ALL
	SELECT * FROM trips_2023_07
	UNION ALL
	SELECT * FROM trips_2023_08
	UNION ALL
	SELECT * FROM trips_2023_09
	UNION ALL
	SELECT * FROM trips_2023_10
	UNION ALL
	SELECT * FROM trips_2023_11
	UNION ALL
	SELECT * FROM trips_2023_12
	);

SELECT * FROM trips_2023;

/* The combined table has 5719877 records which is the same as
the sum of the records in individual tables.

We must check the new table for any inconsistencies like
nulls and duplicates. This can be done by exploring each
column.

#1. We check the ride_id column. As it is the primary key, each value
should be distinct and the length should be same across the
table. */

SELECT LENGTH(ride_id), COUNT(*)
FROM trips_2023
GROUP BY LENGTH(ride_id);

SELECT COUNT (DISTINCT ride_id)
FROM trips_2023;

/* The results show that ride_id is indeed 16 characters long
and unique for all the 5719877 trips. 

#2. Check the rideable_type column. */

SELECT DISTINCT (rideable_type),
COUNT (rideable_type)
FROM trips_2023
GROUP BY rideable_type;

SELECT *
FROM trips_2023
WHERE rideable_type IS NULL;

/* We see that there are 3 different types of bikes available
and that there are no nulls for this column.

#3. Check if start_time and end_time have nulls and if the
the start_time occurs before the end_time. */

SELECT *
FROM trips_2023
WHERE start_time IS NULL OR end_time IS NULL;

SELECT *
FROM trips_2023
WHERE start_time > end_time;

/* There are no nulls in the start_time and end_time columns.
However, there are 272 rows where the start_time occurs
after the end_time. These records can be excluded from the
analysis.

#4. Check for start_station_name and start_station_id for
nulls. */

SELECT start_station_name, start_station_id, COUNT (*)
FROM trips_2023
GROUP BY start_station_name, start_station_id;

SELECT start_station_name, start_station_id, COUNT(*)
FROM trips_2023
WHERE start_station_name LIKE '%Temp%'
GROUP BY start_station_name, start_station_id;

/* We have 1592 unique start_station_name and 875716 records
with no start_station_name/id.
We will remove the records with nulls, trim any additional
spaces and remove the word "Temp" from the names as they are
used during repairs.
The start_station_id does not
have a clear naming convention so we will not clean it as we
also have the station names.

#5. Repeat the same for the end_station_name and 
end_station_id. */

SELECT end_station_name, end_station_id, COUNT (*)
FROM trips_2023
GROUP BY end_station_name, end_station_id;

SELECT end_station_name, end_station_id, COUNT(*)
FROM trips_2023
WHERE end_station_name LIKE '%Temp%'
GROUP BY end_station_name, end_station_id;

/* We have 1609 unique start_station_name and 929202 records
with no end_station_name/id.
We will remove the records with nulls, trim any additional
spaces and remove the word "Temp" from the names as they are
used during repairs.
The end_station_id does not
have a clear naming convention so we will not clean it as we
also have the station names.

#6. Check the start_lat, start_lng, end_lat and end_lng for
nulls. */

SELECT *
FROM trips_2023
WHERE start_lat IS NULL OR 
start_lng IS NULL OR 
end_lat IS NULL OR 
end_lng IS NULL;

/* There are 6990 nulls in the coordinates. These are to be
removed for the purpose of analysis.

#7. Check the user_type for nulls and kinds. */

SELECT DISTINCT user_type, COUNT(*)
FROM trips_2023
GROUP BY user_type;

/* There are no nulls in the user_type column. We have 
3660698 members & 2059179 casual users. */
